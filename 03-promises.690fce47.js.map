{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAaC,SAASC,cAAc,gBACpCC,EAAYF,SAASC,cAAc,eACnCE,EAAcH,SAASC,cAAc,iBAoC3C,SAASG,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CA3CAN,SAASC,cAAc,SAC/Ba,iBAAiB,UAAUC,MAAMC,IACpCA,EAAMC,iBAEN,MAAMC,EAAQC,SAASpB,EAAWqB,OAC5BC,EAAOF,SAASjB,EAAUkB,OAC1BE,EAASH,SAAShB,EAAYiB,OAEpC,IAAK,IAAIG,EAAI,EAAGA,EAAID,EAAQC,IAY1BnB,EAAcmB,EAAGL,EAAQG,EAAOE,GAC7BC,MAAK,EAACnB,SAAEA,EAAQC,MAAEA,MACjBmB,EAAA5B,GAAS6B,OAAOC,QACd,uBAAqBtB,QAAiBC,MAAU,IAGnDsB,OAAM,EAACvB,SAAEA,EAAQC,MAAEA,MAClBmB,EAAA5B,GAAS6B,OAAOG,QACd,sBAAoBxB,QAAeC,MAAU,GAE/C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst inputDelay = document.querySelector('[name=delay]');\nconst inputStep = document.querySelector('[name=step]');\nconst inputAmount = document.querySelector('[name=amount]');\n\nconst form = document.querySelector('.form');\nform.addEventListener('submit', async event => {\n  event.preventDefault();\n\n  const delay = parseInt(inputDelay.value);\n  const step = parseInt(inputStep.value);\n  const amount = parseInt(inputAmount.value);\n\n  for (let i = 1; i < amount; i++) {\n    /**\n     * Другой вариант решения\n     */\n    // try {\n    //   const totalDelay = i === 0 ? delay : step;\n    //   const res = await createPromise(i, totalDelay)\n    //   console.log(`✅ Fulfilled promise ${res.position} in ${res.delay}ms`);\n    // } catch(error) {\n    //   console.log(`❌ Rejected promise ${error.position} in ${error.delay}ms`);\n    // }\n\n    createPromise(i, delay + step * i)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n});\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$inputDelay","document","querySelector","$47d4ff9957288465$var$inputStep","$47d4ff9957288465$var$inputAmount","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","async","event","preventDefault","delay1","parseInt","value","step","amount","i","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.690fce47.js.map"}